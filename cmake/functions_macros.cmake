# Include the current directories. The source diretory is obvious, but we include the binary directory for any header files that might have
# been generated by opt_gen.
macro(target_include_current_directories target)
  target_include_directories(${target}
    PUBLIC ${CMAKE_CURRENT_BINARY_DIR}
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}
  )
endmacro()

macro(opt_gen_ext_base target dir opt aname lname fname out)
  # the additional commands can contain -d

  add_custom_command(
    OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/${out}.h ${CMAKE_CURRENT_BINARY_DIR}/${out}.c
    DEPENDS opt_gen ${dir}/${opt}.opt
    COMMAND ${PROJECT_BINARY_DIR}/support/opt_gen/opt_gen -a ${aname} -l ${lname} -f ${fname} ${ARGN} ${dir}/${opt}.opt -o ${out}
    COMMENT "Generating options file ${opt}")
  
  list(APPEND ${target}_opt "${CMAKE_CURRENT_BINARY_DIR}/${out}.c")
  list(APPEND ${target}_opt_h "${CMAKE_CURRENT_BINARY_DIR}/${out}.h") # TODO: check: explicitly add header dependencies to all projects!
endmacro()

macro(opt_gen_ext target dir opt aname lname fname)
  opt_gen_ext_base(${target} ${dir} ${opt} ${aname} ${lname} ${fname} ${opt} ${ARGN})
endmacro()

macro(opt_gen target dir opt basename fname)
  opt_gen_ext(${target} ${dir} ${opt} ${basename}_options ${basename}_option_list ${fname} ${ARGN})
endmacro()

# Use opt_gen to generate option files, and immediately put them into a library called ${target}_Opt
macro(opt_gen_ext_base_make_library target dir opt aname lname fname out)
  # the additional commands can contain -d
  opt_gen_ext_base(${target} ${dir} ${opt} ${aname} ${lname} ${fname} ${out} ${ARGN})
  add_library(${target}_Opt ${${target}_opt})
  target_include_directories(${target}_Opt PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
  target_link_libraries(${target}_Opt
    PUBLIC Support
  )
endmacro()

# So that we can 'easily' (right) re-use defines from cmake/GeneralConfigureValues. Probably this whole thing can be done better,
# but given the constraints that we have to keep using our current automake-setup too, it'll have to do (although at least I should look into putting
# all these macros and functions into seperate files)
macro(use_global_config prefix)
  foreach(defined ${ARGN})
    if(${${defined}})
      set(${prefix}_${defined} "${${defined}}")
    else()
      unset(${prefix}_${defined})
    endif()
  endforeach()
endmacro()

# Problem is we cannot just set(HAVE_STH to ${SthEnabled})
# because then we just define it to either ON or OFF...
macro(set_defined_from_config defined config)
  if (${${config}})
    set(${defined} "1" CACHE INTERNAL "Internal renaming")
  else()
    set(${defined} "" CACHE INTERNAL "Internal renaming")
  endif()
endmacro()

macro(bison_and_flex_ext script base)
  bison_target(${script}_parser ${base}_parser.y ${CMAKE_CURRENT_BINARY_DIR}/${script}_parser.c)
  flex_target(${script}_lexer ${base}_lexer.l ${CMAKE_CURRENT_BINARY_DIR}/${script}_lexer.c)
  add_flex_bison_dependency(${script}_lexer ${script}_parser)

# TODO list(APPEND deps...)
endmacro()

macro(bison_and_flex script)
  bison_and_flex_ext(${script} ${script})
endmacro()

macro(configure_diablo_config name)
  configure_file(
    "${PROJECT_SOURCE_DIR}/cmake/diablo${name}_config.h.in"
    "${diablo_configs_dir}/diablo${name}_config.h"
  )
endmacro()

MACRO (APPEND_CMAKE_INSTALL_RPATH RPATH_DIRS)
   IF (NOT ${ARGC} EQUAL 1)
     MESSAGE(SEND_ERROR "APPEND_CMAKE_INSTALL_RPATH takes 1 argument")
   ENDIF (NOT ${ARGC} EQUAL 1)
   FOREACH ( RPATH_DIR ${RPATH_DIRS} )
     IF ( NOT ${RPATH_DIR} STREQUAL "" )
        FILE( TO_CMAKE_PATH ${RPATH_DIR} RPATH_DIR )
        STRING( SUBSTRING ${RPATH_DIR} 0 1 RPATH_FIRST_CHAR )
        IF ( NOT ${RPATH_FIRST_CHAR} STREQUAL "/" )
          # relative path; CMake handling for these is unclear,
          # add them directly to the linker line. Add both $ORIGIN
          # and $$ORIGIN to ensure correct behavior for exes and
          # shared libraries.
          SET ( RPATH_DIR "$ORIGIN/${RPATH_DIR}:$$ORIGIN/${RPATH_DIR}" )
          SET ( CMAKE_EXE_LINKER_FLAGS
                "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,'${RPATH_DIR}'" )
          SET ( CMAKE_SHARED_LINKER_FLAGS
                "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-rpath,'${RPATH_DIR}'" )
        ELSE ( NOT ${RPATH_FIRST_CHAR} STREQUAL "/" )
          # absolute path
          SET ( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH}:${RPATH_DIR}" )
        ENDIF ( NOT ${RPATH_FIRST_CHAR} STREQUAL "/" )
     ENDIF ( NOT ${RPATH_DIR} STREQUAL "" )
   ENDFOREACH ( RPATH_DIR )
ENDMACRO ( APPEND_CMAKE_INSTALL_RPATH )
